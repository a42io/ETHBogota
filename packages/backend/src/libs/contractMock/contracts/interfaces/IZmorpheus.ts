/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IZmorpheus {
  export type VerifierStruct = {
    contractAddress: PromiseOrValue<string>;
    merkleTreeDepth: PromiseOrValue<BigNumberish>;
  };

  export type VerifierStructOutput = [string, number] & {
    contractAddress: string;
    merkleTreeDepth: number;
  };
}

export interface IZmorpheusInterface extends utils.Interface {
  functions: {
    "addMember(uint256,uint256)": FunctionFragment;
    "addRelayer(address)": FunctionFragment;
    "createEvent(uint256,uint8,uint256,address)": FunctionFragment;
    "removeMember(uint256,uint256,uint256[],uint8[])": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "verifyMembership(uint256,bytes32,uint256,uint256,uint256[8])": FunctionFragment;
    "verifyMembershipOnlyOnce(uint256,bytes32,uint256,uint256,uint256[8])": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMember"
      | "addRelayer"
      | "createEvent"
      | "removeMember"
      | "removeRelayer"
      | "verifyMembership"
      | "verifyMembershipOnlyOnce"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMember",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMembership",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMembershipOnlyOnce",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMembershipOnlyOnce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EventCreated(uint256,uint8,uint256,address,address)": EventFragment;
    "RelayerAdded(address)": EventFragment;
    "RelayerRemoved(address)": EventFragment;
    "VerifierAdded(tuple)": EventFragment;
    "VerifierRemoved(tuple)": EventFragment;
    "Withdraw(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface EventCreatedEventObject {
  eventId: BigNumber;
  depth: number;
  zeroValue: BigNumber;
  contractAddress: string;
  hostAddress: string;
}
export type EventCreatedEvent = TypedEvent<
  [BigNumber, number, BigNumber, string, string],
  EventCreatedEventObject
>;

export type EventCreatedEventFilter = TypedEventFilter<EventCreatedEvent>;

export interface RelayerAddedEventObject {
  relayerAddress: string;
}
export type RelayerAddedEvent = TypedEvent<[string], RelayerAddedEventObject>;

export type RelayerAddedEventFilter = TypedEventFilter<RelayerAddedEvent>;

export interface RelayerRemovedEventObject {
  relayerAddress: string;
}
export type RelayerRemovedEvent = TypedEvent<
  [string],
  RelayerRemovedEventObject
>;

export type RelayerRemovedEventFilter = TypedEventFilter<RelayerRemovedEvent>;

export interface VerifierAddedEventObject {
  verifier: IZmorpheus.VerifierStructOutput;
}
export type VerifierAddedEvent = TypedEvent<
  [IZmorpheus.VerifierStructOutput],
  VerifierAddedEventObject
>;

export type VerifierAddedEventFilter = TypedEventFilter<VerifierAddedEvent>;

export interface VerifierRemovedEventObject {
  verifier: IZmorpheus.VerifierStructOutput;
}
export type VerifierRemovedEvent = TypedEvent<
  [IZmorpheus.VerifierStructOutput],
  VerifierRemovedEventObject
>;

export type VerifierRemovedEventFilter = TypedEventFilter<VerifierRemovedEvent>;

export interface WithdrawEventObject {
  operator: string;
}
export type WithdrawEvent = TypedEvent<[string], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IZmorpheus extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IZmorpheusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _zeroValue: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      _proofSiblings: PromiseOrValue<BigNumberish>[],
      _proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyMembership(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyMembershipOnlyOnce(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addMember(
    _eventId: PromiseOrValue<BigNumberish>,
    _identityCommitment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    _eventId: PromiseOrValue<BigNumberish>,
    _depth: PromiseOrValue<BigNumberish>,
    _zeroValue: PromiseOrValue<BigNumberish>,
    _contractAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMember(
    _eventId: PromiseOrValue<BigNumberish>,
    _identityCommitment: PromiseOrValue<BigNumberish>,
    _proofSiblings: PromiseOrValue<BigNumberish>[],
    _proofPathIndices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyMembership(
    _eventId: PromiseOrValue<BigNumberish>,
    _signal: PromiseOrValue<BytesLike>,
    _nullifierHash: PromiseOrValue<BigNumberish>,
    _externalNullifier: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyMembershipOnlyOnce(
    _eventId: PromiseOrValue<BigNumberish>,
    _signal: PromiseOrValue<BytesLike>,
    _nullifierHash: PromiseOrValue<BigNumberish>,
    _externalNullifier: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _zeroValue: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      _proofSiblings: PromiseOrValue<BigNumberish>[],
      _proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyMembership(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyMembershipOnlyOnce(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EventCreated(uint256,uint8,uint256,address,address)"(
      eventId?: PromiseOrValue<BigNumberish> | null,
      depth?: null,
      zeroValue?: null,
      contractAddress?: PromiseOrValue<string> | null,
      hostAddress?: PromiseOrValue<string> | null
    ): EventCreatedEventFilter;
    EventCreated(
      eventId?: PromiseOrValue<BigNumberish> | null,
      depth?: null,
      zeroValue?: null,
      contractAddress?: PromiseOrValue<string> | null,
      hostAddress?: PromiseOrValue<string> | null
    ): EventCreatedEventFilter;

    "RelayerAdded(address)"(
      relayerAddress?: PromiseOrValue<string> | null
    ): RelayerAddedEventFilter;
    RelayerAdded(
      relayerAddress?: PromiseOrValue<string> | null
    ): RelayerAddedEventFilter;

    "RelayerRemoved(address)"(
      relayerAddress?: PromiseOrValue<string> | null
    ): RelayerRemovedEventFilter;
    RelayerRemoved(
      relayerAddress?: PromiseOrValue<string> | null
    ): RelayerRemovedEventFilter;

    "VerifierAdded(tuple)"(verifier?: null): VerifierAddedEventFilter;
    VerifierAdded(verifier?: null): VerifierAddedEventFilter;

    "VerifierRemoved(tuple)"(verifier?: null): VerifierRemovedEventFilter;
    VerifierRemoved(verifier?: null): VerifierRemovedEventFilter;

    "Withdraw(address)"(
      operator?: PromiseOrValue<string> | null
    ): WithdrawEventFilter;
    Withdraw(operator?: PromiseOrValue<string> | null): WithdrawEventFilter;
  };

  estimateGas: {
    addMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _zeroValue: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      _proofSiblings: PromiseOrValue<BigNumberish>[],
      _proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyMembership(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyMembershipOnlyOnce(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _zeroValue: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      _proofSiblings: PromiseOrValue<BigNumberish>[],
      _proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyMembership(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMembershipOnlyOnce(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
