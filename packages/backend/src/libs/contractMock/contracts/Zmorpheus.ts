/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IZmorpheus {
  export type VerifierStruct = {
    contractAddress: PromiseOrValue<string>;
    merkleTreeDepth: PromiseOrValue<BigNumberish>;
  };

  export type VerifierStructOutput = [string, number] & {
    contractAddress: string;
    merkleTreeDepth: number;
  };
}

export interface ZmorpheusInterface extends utils.Interface {
  functions: {
    "addMember(uint256,uint256)": FunctionFragment;
    "addRelayer(address)": FunctionFragment;
    "addVerifier((address,uint8))": FunctionFragment;
    "createEvent(uint256,uint8,uint256,address)": FunctionFragment;
    "events(uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "getMerkleTreeDepth(uint256)": FunctionFragment;
    "getMerkleTreeRoot(uint256)": FunctionFragment;
    "getNumberOfMerkleTreeLeaves(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "relayers(address)": FunctionFragment;
    "removeMember(uint256,uint256,uint256[],uint8[])": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "removeVerifier((address,uint8))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifiers(uint256)": FunctionFragment;
    "verifyMembership(uint256,bytes32,uint256,uint256,uint256[8])": FunctionFragment;
    "verifyMembershipOnlyOnce(uint256,bytes32,uint256,uint256,uint256[8])": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMember"
      | "addRelayer"
      | "addVerifier"
      | "createEvent"
      | "events"
      | "fee"
      | "getMerkleTreeDepth"
      | "getMerkleTreeRoot"
      | "getNumberOfMerkleTreeLeaves"
      | "owner"
      | "relayers"
      | "removeMember"
      | "removeRelayer"
      | "removeVerifier"
      | "renounceOwnership"
      | "transferOwnership"
      | "verifiers"
      | "verifyMembership"
      | "verifyMembershipOnlyOnce"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMember",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [IZmorpheus.VerifierStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMerkleTreeDepth",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleTreeRoot",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfMerkleTreeLeaves",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relayers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [IZmorpheus.VerifierStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMembership",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMembershipOnlyOnce",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleTreeDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfMerkleTreeLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMembershipOnlyOnce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EventCreated(uint256,uint8,uint256,address,address)": EventFragment;
    "GroupCreated(uint256,uint256,uint256)": EventFragment;
    "MemberAdded(uint256,uint256,uint256,uint256)": EventFragment;
    "MemberRemoved(uint256,uint256,uint256,uint256)": EventFragment;
    "MemberUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "NullifierHashAdded(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RelayerAdded(address)": EventFragment;
    "RelayerRemoved(address)": EventFragment;
    "VerifierAdded(tuple)": EventFragment;
    "VerifierRemoved(tuple)": EventFragment;
    "Withdraw(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NullifierHashAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface EventCreatedEventObject {
  eventId: BigNumber;
  depth: number;
  zeroValue: BigNumber;
  contractAddress: string;
  hostAddress: string;
}
export type EventCreatedEvent = TypedEvent<
  [BigNumber, number, BigNumber, string, string],
  EventCreatedEventObject
>;

export type EventCreatedEventFilter = TypedEventFilter<EventCreatedEvent>;

export interface GroupCreatedEventObject {
  groupId: BigNumber;
  merkleTreeDepth: BigNumber;
  zeroValue: BigNumber;
}
export type GroupCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  GroupCreatedEventObject
>;

export type GroupCreatedEventFilter = TypedEventFilter<GroupCreatedEvent>;

export interface MemberAddedEventObject {
  groupId: BigNumber;
  index: BigNumber;
  identityCommitment: BigNumber;
  merkleTreeRoot: BigNumber;
}
export type MemberAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MemberAddedEventObject
>;

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;

export interface MemberRemovedEventObject {
  groupId: BigNumber;
  index: BigNumber;
  identityCommitment: BigNumber;
  merkleTreeRoot: BigNumber;
}
export type MemberRemovedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MemberRemovedEventObject
>;

export type MemberRemovedEventFilter = TypedEventFilter<MemberRemovedEvent>;

export interface MemberUpdatedEventObject {
  groupId: BigNumber;
  index: BigNumber;
  identityCommitment: BigNumber;
  newIdentityCommitment: BigNumber;
  merkleTreeRoot: BigNumber;
}
export type MemberUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MemberUpdatedEventObject
>;

export type MemberUpdatedEventFilter = TypedEventFilter<MemberUpdatedEvent>;

export interface NullifierHashAddedEventObject {
  nullifierHash: BigNumber;
}
export type NullifierHashAddedEvent = TypedEvent<
  [BigNumber],
  NullifierHashAddedEventObject
>;

export type NullifierHashAddedEventFilter =
  TypedEventFilter<NullifierHashAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RelayerAddedEventObject {
  relayerAddress: string;
}
export type RelayerAddedEvent = TypedEvent<[string], RelayerAddedEventObject>;

export type RelayerAddedEventFilter = TypedEventFilter<RelayerAddedEvent>;

export interface RelayerRemovedEventObject {
  relayerAddress: string;
}
export type RelayerRemovedEvent = TypedEvent<
  [string],
  RelayerRemovedEventObject
>;

export type RelayerRemovedEventFilter = TypedEventFilter<RelayerRemovedEvent>;

export interface VerifierAddedEventObject {
  verifier: IZmorpheus.VerifierStructOutput;
}
export type VerifierAddedEvent = TypedEvent<
  [IZmorpheus.VerifierStructOutput],
  VerifierAddedEventObject
>;

export type VerifierAddedEventFilter = TypedEventFilter<VerifierAddedEvent>;

export interface VerifierRemovedEventObject {
  verifier: IZmorpheus.VerifierStructOutput;
}
export type VerifierRemovedEvent = TypedEvent<
  [IZmorpheus.VerifierStructOutput],
  VerifierRemovedEventObject
>;

export type VerifierRemovedEventFilter = TypedEventFilter<VerifierRemovedEvent>;

export interface WithdrawEventObject {
  operator: string;
}
export type WithdrawEvent = TypedEvent<[string], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Zmorpheus extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZmorpheusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addVerifier(
      _verifier: IZmorpheus.VerifierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _zeroValue: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        hostAddress: string;
        contractAddress: string;
        createdAt: BigNumber;
      }
    >;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMerkleTreeDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMerkleTreeRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumberOfMerkleTreeLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    relayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      _proofSiblings: PromiseOrValue<BigNumberish>[],
      _proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeVerifier(
      _verifier: IZmorpheus.VerifierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyMembership(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyMembershipOnlyOnce(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addMember(
    _eventId: PromiseOrValue<BigNumberish>,
    _identityCommitment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addVerifier(
    _verifier: IZmorpheus.VerifierStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    _eventId: PromiseOrValue<BigNumberish>,
    _depth: PromiseOrValue<BigNumberish>,
    _zeroValue: PromiseOrValue<BigNumberish>,
    _contractAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  events(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      hostAddress: string;
      contractAddress: string;
      createdAt: BigNumber;
    }
  >;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  getMerkleTreeDepth(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMerkleTreeRoot(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfMerkleTreeLeaves(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  relayers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeMember(
    _eventId: PromiseOrValue<BigNumberish>,
    _identityCommitment: PromiseOrValue<BigNumberish>,
    _proofSiblings: PromiseOrValue<BigNumberish>[],
    _proofPathIndices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeVerifier(
    _verifier: IZmorpheus.VerifierStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifiers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyMembership(
    _eventId: PromiseOrValue<BigNumberish>,
    _signal: PromiseOrValue<BytesLike>,
    _nullifierHash: PromiseOrValue<BigNumberish>,
    _externalNullifier: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyMembershipOnlyOnce(
    _eventId: PromiseOrValue<BigNumberish>,
    _signal: PromiseOrValue<BytesLike>,
    _nullifierHash: PromiseOrValue<BigNumberish>,
    _externalNullifier: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addVerifier(
      _verifier: IZmorpheus.VerifierStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _zeroValue: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        hostAddress: string;
        contractAddress: string;
        createdAt: BigNumber;
      }
    >;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getMerkleTreeDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleTreeRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfMerkleTreeLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    relayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      _proofSiblings: PromiseOrValue<BigNumberish>[],
      _proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVerifier(
      _verifier: IZmorpheus.VerifierStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyMembership(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyMembershipOnlyOnce(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EventCreated(uint256,uint8,uint256,address,address)"(
      eventId?: PromiseOrValue<BigNumberish> | null,
      depth?: null,
      zeroValue?: null,
      contractAddress?: PromiseOrValue<string> | null,
      hostAddress?: PromiseOrValue<string> | null
    ): EventCreatedEventFilter;
    EventCreated(
      eventId?: PromiseOrValue<BigNumberish> | null,
      depth?: null,
      zeroValue?: null,
      contractAddress?: PromiseOrValue<string> | null,
      hostAddress?: PromiseOrValue<string> | null
    ): EventCreatedEventFilter;

    "GroupCreated(uint256,uint256,uint256)"(
      groupId?: PromiseOrValue<BigNumberish> | null,
      merkleTreeDepth?: null,
      zeroValue?: null
    ): GroupCreatedEventFilter;
    GroupCreated(
      groupId?: PromiseOrValue<BigNumberish> | null,
      merkleTreeDepth?: null,
      zeroValue?: null
    ): GroupCreatedEventFilter;

    "MemberAdded(uint256,uint256,uint256,uint256)"(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberAddedEventFilter;
    MemberAdded(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberAddedEventFilter;

    "MemberRemoved(uint256,uint256,uint256,uint256)"(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberRemovedEventFilter;
    MemberRemoved(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberRemovedEventFilter;

    "MemberUpdated(uint256,uint256,uint256,uint256,uint256)"(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      newIdentityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberUpdatedEventFilter;
    MemberUpdated(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      newIdentityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberUpdatedEventFilter;

    "NullifierHashAdded(uint256)"(
      nullifierHash?: null
    ): NullifierHashAddedEventFilter;
    NullifierHashAdded(nullifierHash?: null): NullifierHashAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RelayerAdded(address)"(
      relayerAddress?: PromiseOrValue<string> | null
    ): RelayerAddedEventFilter;
    RelayerAdded(
      relayerAddress?: PromiseOrValue<string> | null
    ): RelayerAddedEventFilter;

    "RelayerRemoved(address)"(
      relayerAddress?: PromiseOrValue<string> | null
    ): RelayerRemovedEventFilter;
    RelayerRemoved(
      relayerAddress?: PromiseOrValue<string> | null
    ): RelayerRemovedEventFilter;

    "VerifierAdded(tuple)"(verifier?: null): VerifierAddedEventFilter;
    VerifierAdded(verifier?: null): VerifierAddedEventFilter;

    "VerifierRemoved(tuple)"(verifier?: null): VerifierRemovedEventFilter;
    VerifierRemoved(verifier?: null): VerifierRemovedEventFilter;

    "Withdraw(address)"(
      operator?: PromiseOrValue<string> | null
    ): WithdrawEventFilter;
    Withdraw(operator?: PromiseOrValue<string> | null): WithdrawEventFilter;
  };

  estimateGas: {
    addMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addVerifier(
      _verifier: IZmorpheus.VerifierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _zeroValue: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getMerkleTreeDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleTreeRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfMerkleTreeLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    relayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      _proofSiblings: PromiseOrValue<BigNumberish>[],
      _proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeVerifier(
      _verifier: IZmorpheus.VerifierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyMembership(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyMembershipOnlyOnce(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addVerifier(
      _verifier: IZmorpheus.VerifierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      _eventId: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _zeroValue: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMerkleTreeDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleTreeRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfMerkleTreeLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMember(
      _eventId: PromiseOrValue<BigNumberish>,
      _identityCommitment: PromiseOrValue<BigNumberish>,
      _proofSiblings: PromiseOrValue<BigNumberish>[],
      _proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeVerifier(
      _verifier: IZmorpheus.VerifierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMembership(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMembershipOnlyOnce(
      _eventId: PromiseOrValue<BigNumberish>,
      _signal: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BigNumberish>,
      _externalNullifier: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
